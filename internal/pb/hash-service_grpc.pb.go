// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/hash-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HasherClient is the client API for Hasher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HasherClient interface {
	Hash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*HashRes, error)
	NewUID(ctx context.Context, in *NewUIDReq, opts ...grpc.CallOption) (*NewUIDRes, error)
}

type hasherClient struct {
	cc grpc.ClientConnInterface
}

func NewHasherClient(cc grpc.ClientConnInterface) HasherClient {
	return &hasherClient{cc}
}

func (c *hasherClient) Hash(ctx context.Context, in *HashReq, opts ...grpc.CallOption) (*HashRes, error) {
	out := new(HashRes)
	err := c.cc.Invoke(ctx, "/proto.Hasher/Hash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hasherClient) NewUID(ctx context.Context, in *NewUIDReq, opts ...grpc.CallOption) (*NewUIDRes, error) {
	out := new(NewUIDRes)
	err := c.cc.Invoke(ctx, "/proto.Hasher/NewUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HasherServer is the server API for Hasher service.
// All implementations must embed UnimplementedHasherServer
// for forward compatibility
type HasherServer interface {
	Hash(context.Context, *HashReq) (*HashRes, error)
	NewUID(context.Context, *NewUIDReq) (*NewUIDRes, error)
	mustEmbedUnimplementedHasherServer()
}

// UnimplementedHasherServer must be embedded to have forward compatible implementations.
type UnimplementedHasherServer struct {
}

func (UnimplementedHasherServer) Hash(context.Context, *HashReq) (*HashRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hash not implemented")
}
func (UnimplementedHasherServer) NewUID(context.Context, *NewUIDReq) (*NewUIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewUID not implemented")
}
func (UnimplementedHasherServer) mustEmbedUnimplementedHasherServer() {}

// UnsafeHasherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HasherServer will
// result in compilation errors.
type UnsafeHasherServer interface {
	mustEmbedUnimplementedHasherServer()
}

func RegisterHasherServer(s grpc.ServiceRegistrar, srv HasherServer) {
	s.RegisterService(&Hasher_ServiceDesc, srv)
}

func _Hasher_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hasher/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServer).Hash(ctx, req.(*HashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hasher_NewUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServer).NewUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hasher/NewUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServer).NewUID(ctx, req.(*NewUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Hasher_ServiceDesc is the grpc.ServiceDesc for Hasher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hasher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hasher",
	HandlerType: (*HasherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hash",
			Handler:    _Hasher_Hash_Handler,
		},
		{
			MethodName: "NewUID",
			Handler:    _Hasher_NewUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/hash-service.proto",
}
